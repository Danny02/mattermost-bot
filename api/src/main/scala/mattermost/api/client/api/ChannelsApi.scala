/**
 * NOTE: This class is auto generated by the akka-scala (beta) swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * For any issue or feedback, please open a ticket via https://github.com/swagger-api/swagger-codegen/issues/new
 */
package mattermost.api.client.api

import mattermost.api.client.core._
import mattermost.api.client.model._

object ChannelsApi {

  /**
   * Delete a channel based from provided channel id string. ##### Permissions &#x60;delete_public_channel&#x60; permission if the channel is public, &#x60;delete_private_channel&#x60; permission if the channel is private, or have &#x60;manage_system&#x60; permission. 
   * 
   * Expected answers:
   *   code 200 : StatusOK (Channel deletion successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   * 
   * @param channelId Channel GUID
   */
  def channelsChannelIdDelete(channelId: String): ApiRequest[StatusOK] =
    ApiRequest[StatusOK](ApiMethods.DELETE, "http://your-mattermost-url.com/api/v4", "/channels/{channel_id}", "application/json")
      .withPathParam("channel_id", channelId)
      .withSuccessResponse[StatusOK](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
        /**
   * Get channel from the provided channel id string. ##### Permissions &#x60;read_channel&#x60; permission for the channel. 
   * 
   * Expected answers:
   *   code 200 : Channel (Channel retrieval successful)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   *   code 404 : AppError (Resource not found)
   * 
   * @param channelId Channel GUID
   */
  def channelsChannelIdGet(channelId: String): ApiRequest[Channel] =
    ApiRequest[Channel](ApiMethods.GET, "http://your-mattermost-url.com/api/v4", "/channels/{channel_id}", "application/json")
      .withPathParam("channel_id", channelId)
      .withSuccessResponse[Channel](200)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
      .withErrorResponse[AppError](404)
        /**
   * Get a page of members for a channel. ##### Permissions &#x60;read_channel&#x60; permission for the channel. 
   * 
   * Expected answers:
   *   code 200 : Seq[ChannelMember] (Channel members retrieval successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   * 
   * @param channelId Channel GUID
   * @param page The page to select.
   * @param perPage The number of members per page.
   */
  def channelsChannelIdMembersGet(channelId: String, page: Option[String], perPage: Option[String]): ApiRequest[Seq[ChannelMember]] =
    ApiRequest[Seq[ChannelMember]](ApiMethods.GET, "http://your-mattermost-url.com/api/v4", "/channels/{channel_id}/members", "application/json")
      .withQueryParam("page", page)
      .withQueryParam("per_page", perPage)
      .withPathParam("channel_id", channelId)
      .withSuccessResponse[Seq[ChannelMember]](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
        /**
   * Get a list of channel members based on the provided user ids. ##### Permissions Must have the &#x60;read_channel&#x60; permission. 
   * 
   * Expected answers:
   *   code 200 : Seq[ChannelMember] (Channel member list retrieval successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   *   code 404 : AppError (Resource not found)
   * 
   * @param channelId Channel GUID
   * @param userIds List of user ids
   */
  def channelsChannelIdMembersIdsPost(channelId: String, userIds: Seq[String]): ApiRequest[Seq[ChannelMember]] =
    ApiRequest[Seq[ChannelMember]](ApiMethods.POST, "http://your-mattermost-url.com/api/v4", "/channels/{channel_id}/members/ids", "application/json")
      .withBody(userIds)
      .withPathParam("channel_id", channelId)
      .withSuccessResponse[Seq[ChannelMember]](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
      .withErrorResponse[AppError](404)
        /**
   * Add a user to a channel by creating a channel member object.
   * 
   * Expected answers:
   *   code 201 : ChannelMember (Channel member creation successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   * 
   * @param channelId The channel ID
   * @param body 
   */
  def channelsChannelIdMembersPost(channelId: String, body: Body25): ApiRequest[ChannelMember] =
    ApiRequest[ChannelMember](ApiMethods.POST, "http://your-mattermost-url.com/api/v4", "/channels/{channel_id}/members", "application/json")
      .withBody(body)
      .withPathParam("channel_id", channelId)
      .withSuccessResponse[ChannelMember](201)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
        /**
   * Delete a channel member, effectively removing them from a channel. ##### Permissions &#x60;manage_public_channel_members&#x60; permission if the channel is public. &#x60;manage_private_channel_members&#x60; permission if the channel is private. 
   * 
   * Expected answers:
   *   code 200 : StatusOK (Channel member deletion successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   * 
   * @param channelId Channel GUID
   * @param userId User GUID
   */
  def channelsChannelIdMembersUserIdDelete(channelId: String, userId: String): ApiRequest[StatusOK] =
    ApiRequest[StatusOK](ApiMethods.DELETE, "http://your-mattermost-url.com/api/v4", "/channels/{channel_id}/members/{user_id}", "application/json")
      .withPathParam("channel_id", channelId)
      .withPathParam("user_id", userId)
      .withSuccessResponse[StatusOK](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
        /**
   * Get a channel member. ##### Permissions &#x60;read_channel&#x60; permission for the channel. 
   * 
   * Expected answers:
   *   code 200 : ChannelMember (Channel member retrieval successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   * 
   * @param channelId Channel GUID
   * @param userId User GUID
   */
  def channelsChannelIdMembersUserIdGet(channelId: String, userId: String): ApiRequest[ChannelMember] =
    ApiRequest[ChannelMember](ApiMethods.GET, "http://your-mattermost-url.com/api/v4", "/channels/{channel_id}/members/{user_id}", "application/json")
      .withPathParam("channel_id", channelId)
      .withPathParam("user_id", userId)
      .withSuccessResponse[ChannelMember](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
        /**
   * Update a user&#39;s notification properties for a channel. Only the provided fields are updated. ##### Permissions Must be logged in as the user or have &#x60;edit_other_users&#x60; permission. 
   * 
   * Expected answers:
   *   code 200 : StatusOK (Channel notification properties update successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   *   code 404 : AppError (Resource not found)
   * 
   * @param channelId Channel GUID
   * @param userId User GUID
   * @param notifyProps 
   */
  def channelsChannelIdMembersUserIdNotifyPropsPut(channelId: String, userId: String, notifyProps: ChannelNotifyProps): ApiRequest[StatusOK] =
    ApiRequest[StatusOK](ApiMethods.PUT, "http://your-mattermost-url.com/api/v4", "/channels/{channel_id}/members/{user_id}/notify_props", "application/json")
      .withBody(notifyProps)
      .withPathParam("channel_id", channelId)
      .withPathParam("user_id", userId)
      .withSuccessResponse[StatusOK](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
      .withErrorResponse[AppError](404)
        /**
   * Update a user&#39;s roles for a channel. ##### Permissions Must have &#x60;manage_channel_roles&#x60; permission for the channel. 
   * 
   * Expected answers:
   *   code 200 : StatusOK (Channel roles update successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   * 
   * @param channelId Channel GUID
   * @param userId User GUID
   * @param roles Space-delimited channel roles to assign to the user
   */
  def channelsChannelIdMembersUserIdRolesPut(channelId: String, userId: String, roles: Roles1): ApiRequest[StatusOK] =
    ApiRequest[StatusOK](ApiMethods.PUT, "http://your-mattermost-url.com/api/v4", "/channels/{channel_id}/members/{user_id}/roles", "application/json")
      .withBody(roles)
      .withPathParam("channel_id", channelId)
      .withPathParam("user_id", userId)
      .withSuccessResponse[StatusOK](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
        /**
   * Partially update a channel by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions If updating a public channel, &#x60;manage_public_channel_members&#x60; permission is required. If updating a private channel, &#x60;manage_private_channel_members&#x60; permission is required. 
   * 
   * Expected answers:
   *   code 200 : Channel (Channel patch successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   *   code 404 : AppError (Resource not found)
   * 
   * @param channelId Channel GUID
   * @param body Channel object to be updated
   */
  def channelsChannelIdPatchPut(channelId: String, body: Body23): ApiRequest[Channel] =
    ApiRequest[Channel](ApiMethods.PUT, "http://your-mattermost-url.com/api/v4", "/channels/{channel_id}/patch", "application/json")
      .withBody(body)
      .withPathParam("channel_id", channelId)
      .withSuccessResponse[Channel](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
      .withErrorResponse[AppError](404)
        /**
   * Get a list of pinned posts for channel.
   * 
   * Expected answers:
   *   code 200 : PostList (The list of channel pinned posts)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   * 
   * @param channelId Channel GUID
   */
  def channelsChannelIdPinnedGet(channelId: String): ApiRequest[PostList] =
    ApiRequest[PostList](ApiMethods.GET, "http://your-mattermost-url.com/api/v4", "/channels/{channel_id}/pinned", "application/json")
      .withPathParam("channel_id", channelId)
      .withSuccessResponse[PostList](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
        /**
   * Update a channel. The fields that can be updated are listed as paramters. Omitted fields will be treated as blanks. ##### Permissions If updating a public channel, &#x60;manage_public_channel_members&#x60; permission is required. If updating a private channel, &#x60;manage_private_channel_members&#x60; permission is required. 
   * 
   * Expected answers:
   *   code 200 : Channel (Channel update successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   *   code 404 : AppError (Resource not found)
   * 
   * @param channelId Channel GUID
   * @param body Channel object to be updated
   */
  def channelsChannelIdPut(channelId: String, body: Body22): ApiRequest[Channel] =
    ApiRequest[Channel](ApiMethods.PUT, "http://your-mattermost-url.com/api/v4", "/channels/{channel_id}", "application/json")
      .withBody(body)
      .withPathParam("channel_id", channelId)
      .withSuccessResponse[Channel](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
      .withErrorResponse[AppError](404)
        /**
   * Restore channel from the provided channel id string.  __Minimum server version__: 3.10  ##### Permissions &#x60;manage_team&#x60; permission for the team of channel. 
   * 
   * Expected answers:
   *   code 200 : Channel (Channel restore successful)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   *   code 404 : AppError (Resource not found)
   * 
   * @param channelId Channel GUID
   */
  def channelsChannelIdRestorePost(channelId: String): ApiRequest[Channel] =
    ApiRequest[Channel](ApiMethods.POST, "http://your-mattermost-url.com/api/v4", "/channels/{channel_id}/restore", "application/json")
      .withPathParam("channel_id", channelId)
      .withSuccessResponse[Channel](200)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
      .withErrorResponse[AppError](404)
        /**
   * Get statistics for a channel. ##### Permissions Must have the &#x60;read_channel&#x60; permission. 
   * 
   * Expected answers:
   *   code 200 : ChannelStats (Channel statistics retrieval successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   * 
   * @param channelId Channel GUID
   */
  def channelsChannelIdStatsGet(channelId: String): ApiRequest[ChannelStats] =
    ApiRequest[ChannelStats](ApiMethods.GET, "http://your-mattermost-url.com/api/v4", "/channels/{channel_id}/stats", "application/json")
      .withPathParam("channel_id", channelId)
      .withSuccessResponse[ChannelStats](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
        /**
   * Create a new direct message channel between two users. ##### Permissions Must be one of the two users and have &#x60;create_direct_channel&#x60; permission. Having the &#x60;manage_system&#x60; permission voids the previous requirements. 
   * 
   * Expected answers:
   *   code 201 : Channel (Direct channel creation successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   * 
   * @param body The two user ids to be in the direct message
   */
  def channelsDirectPost(body: Seq[String]): ApiRequest[Channel] =
    ApiRequest[Channel](ApiMethods.POST, "http://your-mattermost-url.com/api/v4", "/channels/direct", "application/json")
      .withBody(body)
      .withSuccessResponse[Channel](201)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
        /**
   * Create a new group message channel to group of users. If the logged in user&#39;s id is not included in the list, it will be appended to the end. ##### Permissions Must have &#x60;create_group_channel&#x60; permission. 
   * 
   * Expected answers:
   *   code 201 : Channel (Group channel creation successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   * 
   * @param body User ids to be in the group message channel
   */
  def channelsGroupPost(body: Seq[String]): ApiRequest[Channel] =
    ApiRequest[Channel](ApiMethods.POST, "http://your-mattermost-url.com/api/v4", "/channels/group", "application/json")
      .withBody(body)
      .withSuccessResponse[Channel](201)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
        /**
   * Perform all the actions involved in viewing a channel. This includes marking channels as read, clearing push notifications, and updating the active channel. ##### Permissions Must be logged in as user or have &#x60;edit_other_users&#x60; permission.  __Response only includes &#x60;last_viewed_at_times&#x60; in Mattermost server 4.3 and newer.__ 
   * 
   * Expected answers:
   *   code 200 : InlineResponse2005 (Channel view successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   * 
   * @param userId User ID to perform the view action for
   * @param body Paremeters affecting how and which channels to view
   */
  def channelsMembersUserIdViewPost(userId: String, body: Body26): ApiRequest[InlineResponse2005] =
    ApiRequest[InlineResponse2005](ApiMethods.POST, "http://your-mattermost-url.com/api/v4", "/channels/members/{user_id}/view", "application/json")
      .withBody(body)
      .withPathParam("user_id", userId)
      .withSuccessResponse[InlineResponse2005](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
        /**
   * Create a new channel. ##### Permissions If creating a public channel, &#x60;create_public_channel&#x60; permission is required. If creating a private channel, &#x60;create_private_channel&#x60; permission is required. 
   * 
   * Expected answers:
   *   code 201 : Channel (Channel creation successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   * 
   * @param body Channel object to be created
   */
  def channelsPost(body: Body21): ApiRequest[Channel] =
    ApiRequest[Channel](ApiMethods.POST, "http://your-mattermost-url.com/api/v4", "/channels", "application/json")
      .withBody(body)
      .withSuccessResponse[Channel](201)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
        /**
   * Gets a channel from the provided team name and channel name strings. ##### Permissions &#x60;read_channel&#x60; permission for the channel. 
   * 
   * Expected answers:
   *   code 200 : Channel (Channel retrieval successful)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   *   code 404 : AppError (Resource not found)
   * 
   * @param teamName Team Name
   * @param channelName Channel Name
   */
  def teamsNameTeamNameChannelsNameChannelNameGet(teamName: String, channelName: String): ApiRequest[Channel] =
    ApiRequest[Channel](ApiMethods.GET, "http://your-mattermost-url.com/api/v4", "/teams/name/{team_name}/channels/name/{channel_name}", "application/json")
      .withPathParam("team_name", teamName)
      .withPathParam("channel_name", channelName)
      .withSuccessResponse[Channel](200)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
      .withErrorResponse[AppError](404)
        /**
   * Get a page of deleted channels on a team based on query string parameters - team_id, page and per_page.  __Minimum server version__: 3.10  ##### Permissions Must be authenticated and have the &#x60;manage_team&#x60; permission. 
   * 
   * Expected answers:
   *   code 200 : Seq[Channel] (Channels retrieval successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   *   code 404 : AppError (Resource not found)
   * 
   * @param teamId Team GUID
   * @param page The page to select.
   * @param perPage The number of public channels per page.
   */
  def teamsTeamIdChannelsDeletedGet(teamId: String, page: Option[String], perPage: Option[String]): ApiRequest[Seq[Channel]] =
    ApiRequest[Seq[Channel]](ApiMethods.GET, "http://your-mattermost-url.com/api/v4", "/teams/{team_id}/channels/deleted", "application/json")
      .withQueryParam("page", page)
      .withQueryParam("per_page", perPage)
      .withPathParam("team_id", teamId)
      .withSuccessResponse[Seq[Channel]](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
      .withErrorResponse[AppError](404)
        /**
   * Get a page of public channels on a team based on query string parameters - page and per_page. ##### Permissions Must be authenticated and have the &#x60;list_team_channels&#x60; permission. 
   * 
   * Expected answers:
   *   code 200 : Seq[Channel] (Channels retrieval successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   *   code 404 : AppError (Resource not found)
   * 
   * @param teamId Team GUID
   * @param page The page to select.
   * @param perPage The number of public channels per page.
   */
  def teamsTeamIdChannelsGet(teamId: String, page: Option[String], perPage: Option[String]): ApiRequest[Seq[Channel]] =
    ApiRequest[Seq[Channel]](ApiMethods.GET, "http://your-mattermost-url.com/api/v4", "/teams/{team_id}/channels", "application/json")
      .withQueryParam("page", page)
      .withQueryParam("per_page", perPage)
      .withPathParam("team_id", teamId)
      .withSuccessResponse[Seq[Channel]](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
      .withErrorResponse[AppError](404)
        /**
   * Get a list of public channels on a team by id. ##### Permissions &#x60;view_team&#x60; for the team the channels are on. 
   * 
   * Expected answers:
   *   code 200 : Seq[Channel] (Channel list retrieval successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 404 : AppError (Resource not found)
   * 
   * @param teamId Team GUID
   * @param body List of channel ids
   */
  def teamsTeamIdChannelsIdsPost(teamId: String, body: Seq[String]): ApiRequest[Seq[Channel]] =
    ApiRequest[Seq[Channel]](ApiMethods.POST, "http://your-mattermost-url.com/api/v4", "/teams/{team_id}/channels/ids", "application/json")
      .withBody(body)
      .withPathParam("team_id", teamId)
      .withSuccessResponse[Seq[Channel]](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](404)
        /**
   * Gets channel from the provided team id and channel name strings. ##### Permissions &#x60;read_channel&#x60; permission for the channel. 
   * 
   * Expected answers:
   *   code 200 : Channel (Channel retrieval successful)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   *   code 404 : AppError (Resource not found)
   * 
   * @param teamId Team GUID
   * @param channelName Channel Name
   */
  def teamsTeamIdChannelsNameChannelNameGet(teamId: String, channelName: String): ApiRequest[Channel] =
    ApiRequest[Channel](ApiMethods.GET, "http://your-mattermost-url.com/api/v4", "/teams/{team_id}/channels/name/{channel_name}", "application/json")
      .withPathParam("team_id", teamId)
      .withPathParam("channel_name", channelName)
      .withSuccessResponse[Channel](200)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
      .withErrorResponse[AppError](404)
        /**
   * Search public channels on a team based on the search term provided in the request body. ##### Permissions Must have the &#x60;list_team_channels&#x60; permission. 
   * 
   * Expected answers:
   *   code 201 : Seq[Channel] (Channels search successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   *   code 404 : AppError (Resource not found)
   * 
   * @param teamId Team GUID
   * @param body Search criteria
   */
  def teamsTeamIdChannelsSearchPost(teamId: String, body: Body24): ApiRequest[Seq[Channel]] =
    ApiRequest[Seq[Channel]](ApiMethods.POST, "http://your-mattermost-url.com/api/v4", "/teams/{team_id}/channels/search", "application/json")
      .withBody(body)
      .withPathParam("team_id", teamId)
      .withSuccessResponse[Seq[Channel]](201)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
      .withErrorResponse[AppError](404)
        /**
   * Get the total unread messages and mentions for a channel for a user. ##### Permissions Must be logged in as user and have the &#x60;read_channel&#x60; permission, or have &#x60;edit_other_usrs&#x60; permission. 
   * 
   * Expected answers:
   *   code 200 : ChannelUnread (Channel unreads retrieval successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   *   code 404 : AppError (Resource not found)
   * 
   * @param userId User GUID
   * @param channelId Channel GUID
   */
  def usersUserIdChannelsChannelIdUnreadGet(userId: String, channelId: String): ApiRequest[ChannelUnread] =
    ApiRequest[ChannelUnread](ApiMethods.GET, "http://your-mattermost-url.com/api/v4", "/users/{user_id}/channels/{channel_id}/unread", "application/json")
      .withPathParam("user_id", userId)
      .withPathParam("channel_id", channelId)
      .withSuccessResponse[ChannelUnread](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
      .withErrorResponse[AppError](404)
        /**
   * Get all the channels on a team for a user. ##### Permissions Logged in as the user, or have &#x60;edit_other_users&#x60; permission, and &#x60;view_team&#x60; permission for the team. 
   * 
   * Expected answers:
   *   code 200 : Seq[Channel] (Channels retrieval successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   *   code 404 : AppError (Resource not found)
   * 
   * @param userId User GUID
   * @param teamId Team GUID
   */
  def usersUserIdTeamsTeamIdChannelsGet(userId: String, teamId: String): ApiRequest[Seq[Channel]] =
    ApiRequest[Seq[Channel]](ApiMethods.GET, "http://your-mattermost-url.com/api/v4", "/users/{user_id}/teams/{team_id}/channels", "application/json")
      .withPathParam("user_id", userId)
      .withPathParam("team_id", teamId)
      .withSuccessResponse[Seq[Channel]](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
      .withErrorResponse[AppError](404)
        /**
   * Get all channel members on a team for a user. ##### Permissions Logged in as the user and &#x60;view_team&#x60; permission for the team. Having &#x60;manage_system&#x60; permission voids the previous requirements. 
   * 
   * Expected answers:
   *   code 200 : Seq[ChannelMember] (Channel members retrieval successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   * 
   * @param userId User GUID
   * @param teamId Team GUID
   */
  def usersUserIdTeamsTeamIdChannelsMembersGet(userId: String, teamId: String): ApiRequest[Seq[ChannelMember]] =
    ApiRequest[Seq[ChannelMember]](ApiMethods.GET, "http://your-mattermost-url.com/api/v4", "/users/{user_id}/teams/{team_id}/channels/members", "application/json")
      .withPathParam("user_id", userId)
      .withPathParam("team_id", teamId)
      .withSuccessResponse[Seq[ChannelMember]](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
      

}

