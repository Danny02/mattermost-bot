/**
 * NOTE: This class is auto generated by the akka-scala (beta) swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * For any issue or feedback, please open a ticket via https://github.com/swagger-api/swagger-codegen/issues/new
 */
package mattermost.api.client.api

import java.io.File

import mattermost.api.client.core._
import mattermost.api.client.model._

object UsersApi {

  /**
   * Get a list of users for the purpose of autocompleting based on the provided search term. Specify a combination of &#x60;team_id&#x60; and &#x60;channel_id&#x60; to filter results further. ##### Permissions Requires an active session and &#x60;view_team&#x60; and &#x60;read_channel&#x60; on any teams or channels used to filter the results further. 
   * 
   * Expected answers:
   *   code 200 : UserAutocomplete (User autocomplete successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   * 
   * @param name Username, nickname first name or last name
   * @param teamId Team ID
   * @param channelId Channel ID
   */
  def usersAutocompleteGet(name: String, teamId: Option[String] = None, channelId: Option[String] = None): ApiRequest[UserAutocomplete] =
    ApiRequest[UserAutocomplete](ApiMethods.GET, "http://your-mattermost-url.com/api/v4", "/users/autocomplete", "application/json")
      .withQueryParam("team_id", teamId)
      .withQueryParam("channel_id", channelId)
      .withQueryParam("name", name)
      .withSuccessResponse[UserAutocomplete](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
        /**
   * Get a user object by providing a user email. Sensitive information will be sanitized out. ##### Permissions Requires an active session but no other permissions. 
   * 
   * Expected answers:
   *   code 200 : User (User retrieval successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 404 : AppError (Resource not found)
   * 
   * @param email User Email
   */
  def usersEmailEmailGet(email: String): ApiRequest[User] =
    ApiRequest[User](ApiMethods.GET, "http://your-mattermost-url.com/api/v4", "/users/email/{email}", "application/json")
      .withPathParam("email", email)
      .withSuccessResponse[User](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](404)
        /**
   * Verify the email used by a user to sign-up their account with. ##### Permissions No permissions required. 
   * 
   * Expected answers:
   *   code 200 : StatusOK (User email verification successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   * 
   * @param body 
   */
  def usersEmailVerifyPost(body: Body12): ApiRequest[StatusOK] =
    ApiRequest[StatusOK](ApiMethods.POST, "http://your-mattermost-url.com/api/v4", "/users/email/verify", "application/json")
      .withBody(body)
      .withSuccessResponse[StatusOK](200)
      .withErrorResponse[AppError](400)
        /**
   * Send an email with a verification link to a user that has an email matching the one in the request body. This endpoint will return success even if the email does not match any users on the system. ##### Permissions No permissions required. 
   * 
   * Expected answers:
   *   code 200 : StatusOK (Email send successful if email exists)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   * 
   * @param body 
   */
  def usersEmailVerifySendPost(body: Body13): ApiRequest[StatusOK] =
    ApiRequest[StatusOK](ApiMethods.POST, "http://your-mattermost-url.com/api/v4", "/users/email/verify/send", "application/json")
      .withBody(body)
      .withSuccessResponse[StatusOK](200)
      .withErrorResponse[AppError](400)
        /**
   * Get a page of a list of users. Based on query string parameters, select users from a team, channel, or select users not in a specific channel.  Since server version 4.0, some basic sorting is available using the &#x60;sort&#x60; query parameter. Sorting is currently only supported when selecting users on a team. ##### Permissions Requires an active session and (if specified) membership to the channel or team being selected from. 
   * 
   * Expected answers:
   *   code 200 : Seq[User] (User page retrieval successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   * 
   * @param page The page to select.
   * @param perPage The number of users per page. There is a maximum limit of 200 users per page.
   * @param inTeam The ID of the team to get users for.
   * @param notInTeam The ID of the team to exclude users for. Must not be used with \&quot;in_team\&quot; query parameter.
   * @param inChannel The ID of the channel to get users for.
   * @param notInChannel The ID of the channel to exclude users for. Must be used with \&quot;in_channel\&quot; query parameter.
   * @param withoutTeam Whether or not to list users that are not on any team. This option takes precendence over &#x60;in_team&#x60;, &#x60;in_channel&#x60;, and &#x60;not_in_channel&#x60;.
   * @param sort Can be \&quot;\&quot;, \&quot;last_activity_at\&quot; or \&quot;create_at\&quot;. When left blank sorting is done by username. Must be used in conjunction with &#x60;in_team&#x60; and no other query parameters (exlcuding the paging parameters). **Minimum server version: 4.0** 
   */
  def usersGet(page: Option[String], perPage: Option[String], inTeam: Option[String] = None, notInTeam: Option[String] = None, inChannel: Option[String] = None, notInChannel: Option[String] = None, withoutTeam: Option[Boolean] = None, sort: Option[String] = None): ApiRequest[Seq[User]] =
    ApiRequest[Seq[User]](ApiMethods.GET, "http://your-mattermost-url.com/api/v4", "/users", "application/json")
      .withQueryParam("page", page)
      .withQueryParam("per_page", perPage)
      .withQueryParam("in_team", inTeam)
      .withQueryParam("not_in_team", notInTeam)
      .withQueryParam("in_channel", inChannel)
      .withQueryParam("not_in_channel", notInChannel)
      .withQueryParam("without_team", withoutTeam)
      .withQueryParam("sort", sort)
      .withSuccessResponse[Seq[User]](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
        /**
   * Get a list of users based on a provided list of user ids. ##### Permissions Requires an active session but no other permissions. 
   * 
   * Expected answers:
   *   code 200 : Seq[User] (User list retrieval successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   * 
   * @param body List of user ids
   */
  def usersIdsPost(body: Seq[String]): ApiRequest[Seq[User]] =
    ApiRequest[Seq[User]](ApiMethods.POST, "http://your-mattermost-url.com/api/v4", "/users/ids", "application/json")
      .withBody(body)
      .withSuccessResponse[Seq[User]](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
        /**
   * Switch a user&#39;s login method from using email to OAuth2/SAML/LDAP or back to email. When switching to OAuth2/SAML, account switching is not complete until the user follows the returned link and completes any steps on the OAuth2/SAML service provider.  To switch from email to OAuth2/SAML, specify &#x60;current_service&#x60;, &#x60;new_service&#x60;, &#x60;email&#x60; and &#x60;password&#x60;.  To switch from OAuth2/SAML to email, specify &#x60;current_service&#x60;, &#x60;new_service&#x60;, &#x60;email&#x60; and &#x60;new_password&#x60;.  To switch from email to LDAP/AD, specify &#x60;current_service&#x60;, &#x60;new_service&#x60;, &#x60;email&#x60;, &#x60;password&#x60;, &#x60;ldap_ip&#x60; and &#x60;new_password&#x60; (this is the user&#39;s LDAP password).  To switch from LDAP/AD to email, specify &#x60;current_service&#x60;, &#x60;new_service&#x60;, &#x60;ldap_ip&#x60;, &#x60;password&#x60; (this is the user&#39;s LDAP password), &#x60;email&#x60;  and &#x60;new_password&#x60;.  Additionally, specify &#x60;mfa_code&#x60; when trying to switch an account on LDAP/AD or email that has MFA activated.  ##### Permissions No current authentication required except when switching from OAuth2/SAML to email. 
   * 
   * Expected answers:
   *   code 200 : InlineResponse2002 (Login method switch or request successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   *   code 404 : AppError (Resource not found)
   *   code 501 : AppError (Feature is disabled)
   * 
   * @param body 
   */
  def usersLoginSwitchPost(body: Body14): ApiRequest[InlineResponse2002] =
    ApiRequest[InlineResponse2002](ApiMethods.POST, "http://your-mattermost-url.com/api/v4", "/users/login/switch", "application/json")
      .withBody(body)
      .withSuccessResponse[InlineResponse2002](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
      .withErrorResponse[AppError](404)
      .withErrorResponse[AppError](501)
        /**
   * Check if a user has multi-factor authentication active on their account by providing a login id. Used to check whether an MFA code needs to be provided when logging in. ##### Permissions No permission required. 
   * 
   * Expected answers:
   *   code 200 : InlineResponse2001 (MFA check successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   * 
   * @param body 
   */
  def usersMfaPost(body: Body7): ApiRequest[InlineResponse2001] =
    ApiRequest[InlineResponse2001](ApiMethods.POST, "http://your-mattermost-url.com/api/v4", "/users/mfa", "application/json")
      .withBody(body)
      .withSuccessResponse[InlineResponse2001](200)
      .withErrorResponse[AppError](400)
        /**
   * Update the password for a user using a one-use, timed recovery code tied to the user&#39;s account. Only works for non-SSO users. ##### Permissions No permissions required. 
   * 
   * Expected answers:
   *   code 200 : StatusOK (User password update successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   * 
   * @param body 
   */
  def usersPasswordResetPost(body: Body5): ApiRequest[StatusOK] =
    ApiRequest[StatusOK](ApiMethods.POST, "http://your-mattermost-url.com/api/v4", "/users/password/reset", "application/json")
      .withBody(body)
      .withSuccessResponse[StatusOK](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
        /**
   * Send an email containing a link for resetting the user&#39;s password. The link will contain a one-use, timed recovery code tied to the user&#39;s account. Only works for non-SSO users. ##### Permissions No permissions required. 
   * 
   * Expected answers:
   *   code 200 : StatusOK (Email sent if account exists)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   * 
   * @param body 
   */
  def usersPasswordResetSendPost(body: Body9): ApiRequest[StatusOK] =
    ApiRequest[StatusOK](ApiMethods.POST, "http://your-mattermost-url.com/api/v4", "/users/password/reset/send", "application/json")
      .withBody(body)
      .withSuccessResponse[StatusOK](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
        /**
   * Create a new user on the system. ##### Permissions No permission required but user creation can be controlled by server configuration. 
   * 
   * Expected answers:
   *   code 201 : User (User creation successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 403 : AppError (Do not have appropriate permissions)
   * 
   * @param body User object to be created
   */
  def usersPost(body: Body): ApiRequest[User] =
    ApiRequest[User](ApiMethods.POST, "http://your-mattermost-url.com/api/v4", "/users", "application/json")
      .withBody(body)
      .withSuccessResponse[User](201)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](403)
        /**
   * Get a list of users based on search criteria provided in the request body. Searches are typically done against username, full name, nickname and email unless otherwise configured by the server. ##### Permissions Requires an active session and &#x60;read_channel&#x60; and/or &#x60;view_team&#x60; permissions for any channels or teams specified in the request body. 
   * 
   * Expected answers:
   *   code 200 : Seq[User] (User list retrieval successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   * 
   * @param body Search criteria
   */
  def usersSearchPost(body: Body1): ApiRequest[Seq[User]] =
    ApiRequest[Seq[User]](ApiMethods.POST, "http://your-mattermost-url.com/api/v4", "/users/search", "application/json")
      .withBody(body)
      .withSuccessResponse[Seq[User]](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
        /**
   * Attach a mobile device id to the currently logged in session. This will enable push notiofications for a user, if configured by the server. ##### Permissions Must be authenticated. 
   * 
   * Expected answers:
   *   code 200 : StatusOK (Device id attach successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   * 
   * @param body 
   */
  def usersSessionsDevicePut(body: Body11): ApiRequest[StatusOK] =
    ApiRequest[StatusOK](ApiMethods.PUT, "http://your-mattermost-url.com/api/v4", "/users/sessions/device", "application/json")
      .withBody(body)
      .withSuccessResponse[StatusOK](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
        /**
   * Disable a personal access token and delete any sessions using the token. The token can be re-enabled using &#x60;/users/tokens/enable&#x60;.  __Minimum server version__: 4.4  ##### Permissions Must have &#x60;revoke_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
   * 
   * Expected answers:
   *   code 200 : StatusOK (Personal access token disable successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   * 
   * @param token 
   */
  def usersTokensDisablePost(token: Token2): ApiRequest[StatusOK] =
    ApiRequest[StatusOK](ApiMethods.POST, "http://your-mattermost-url.com/api/v4", "/users/tokens/disable", "application/json")
      .withBody(token)
      .withSuccessResponse[StatusOK](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
        /**
   * Re-enable a personal access token that has been disabled.  __Minimum server version__: 4.4  ##### Permissions Must have &#x60;create_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
   * 
   * Expected answers:
   *   code 200 : StatusOK (Personal access token enable successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   * 
   * @param token 
   */
  def usersTokensEnablePost(token: Token3): ApiRequest[StatusOK] =
    ApiRequest[StatusOK](ApiMethods.POST, "http://your-mattermost-url.com/api/v4", "/users/tokens/enable", "application/json")
      .withBody(token)
      .withSuccessResponse[StatusOK](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
        /**
   * Revoke a user access token and delete any sessions using the token.  __Minimum server version__: 4.1  ##### Permissions Must have &#x60;revoke_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
   * 
   * Expected answers:
   *   code 200 : StatusOK (User access token revoke successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   * 
   * @param token 
   */
  def usersTokensRevokePost(token: Token1): ApiRequest[StatusOK] =
    ApiRequest[StatusOK](ApiMethods.POST, "http://your-mattermost-url.com/api/v4", "/users/tokens/revoke", "application/json")
      .withBody(token)
      .withSuccessResponse[StatusOK](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
        /**
   * Get a user access token. Does not include the actual authentication token.  __Minimum server version__: 4.1  ##### Permissions Must have &#x60;read_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
   * 
   * Expected answers:
   *   code 200 : UserAccessTokenSanitized (User access token retrieval successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   *   code 404 : AppError (Resource not found)
   * 
   * @param tokenId User access token GUID
   */
  def usersTokensTokenIdGet(tokenId: String): ApiRequest[UserAccessTokenSanitized] =
    ApiRequest[UserAccessTokenSanitized](ApiMethods.GET, "http://your-mattermost-url.com/api/v4", "/users/tokens/{token_id}", "application/json")
      .withPathParam("token_id", tokenId)
      .withSuccessResponse[UserAccessTokenSanitized](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
      .withErrorResponse[AppError](404)
        /**
   * Update user active or inactive status.  __Since server version 4.6, users using a SSO provider to login can be activated or deactivated with this endpoint. However, if their activation status in Mattermost does not reflect their status in the SSO provider, the next synchronization or login by that user will reset the activation status to that of their account in the SSO provider. Server versions 4.5 and before do not allow activation or deactivation of SSO users from this endpoint.__ ##### Permissions User can deactivate themself. User with &#x60;manage_system&#x60; permission can activate or deactivate a user. 
   * 
   * Expected answers:
   *   code 200 : StatusOK (User active status update successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   * 
   * @param userId User GUID
   * @param body Use &#x60;true&#x60; to set the user active, &#x60;false&#x60; for inactive
   */
  def usersUserIdActivePut(userId: String, body: Body4): ApiRequest[StatusOK] =
    ApiRequest[StatusOK](ApiMethods.PUT, "http://your-mattermost-url.com/api/v4", "/users/{user_id}/active", "application/json")
      .withBody(body)
      .withPathParam("user_id", userId)
      .withSuccessResponse[StatusOK](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
        /**
   * Get a list of audit by providing the user GUID. ##### Permissions Must be logged in as the user or have the &#x60;edit_other_users&#x60; permission. 
   * 
   * Expected answers:
   *   code 200 : Seq[Audit] (User audits retrieval successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   * 
   * @param userId User GUID
   */
  def usersUserIdAuditsGet(userId: String): ApiRequest[Seq[Audit]] =
    ApiRequest[Seq[Audit]](ApiMethods.GET, "http://your-mattermost-url.com/api/v4", "/users/{user_id}/audits", "application/json")
      .withPathParam("user_id", userId)
      .withSuccessResponse[Seq[Audit]](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
        /**
   * Deactivates the user by archiving its user object. ##### Permissions Must be logged in as the user being deactivated or have the &#x60;edit_other_users&#x60; permission. 
   * 
   * Expected answers:
   *   code 200 : StatusOK (User deactivation successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   *   code 404 : AppError (Resource not found)
   * 
   * @param userId User GUID
   */
  def usersUserIdDelete(userId: String): ApiRequest[StatusOK] =
    ApiRequest[StatusOK](ApiMethods.DELETE, "http://your-mattermost-url.com/api/v4", "/users/{user_id}", "application/json")
      .withPathParam("user_id", userId)
      .withSuccessResponse[StatusOK](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
      .withErrorResponse[AppError](404)
        /**
   * Get a user a object. Sensitive information will be sanitized out. ##### Permissions Requires an active session but no other permissions. 
   * 
   * Expected answers:
   *   code 200 : User (User retrieval successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 404 : AppError (Resource not found)
   * 
   * @param userId User GUID
   */
  def usersUserIdGet(userId: String): ApiRequest[User] =
    ApiRequest[User](ApiMethods.GET, "http://your-mattermost-url.com/api/v4", "/users/{user_id}", "application/json")
      .withPathParam("user_id", userId)
      .withSuccessResponse[User](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](404)
        /**
   * Get a user&#39;s profile image based on user_id string parameter. ##### Permissions Must be logged in. 
   * 
   * Expected answers:
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   *   code 404 : AppError (Resource not found)
   *   code 501 : AppError (Feature is disabled)
   * 
   * @param userId User GUID
   */
  def usersUserIdImageGet(userId: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, "http://your-mattermost-url.com/api/v4", "/users/{user_id}/image", "application/json")
      .withPathParam("user_id", userId)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
      .withErrorResponse[AppError](404)
      .withErrorResponse[AppError](501)
        /**
   * Set a user&#39;s profile image based on user_id string parameter. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
   * 
   * Expected answers:
   *   code 200 : StatusOK (Profile image set successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   *   code 404 : AppError (Resource not found)
   *   code 501 : AppError (Feature is disabled)
   * 
   * @param image The image to be uploaded
   * @param userId User GUID
   */
  def usersUserIdImagePost(image: File, userId: String): ApiRequest[StatusOK] =
    ApiRequest[StatusOK](ApiMethods.POST, "http://your-mattermost-url.com/api/v4", "/users/{user_id}/image", "multipart/form-data")
      .withFormParam("image", image)
      .withPathParam("user_id", userId)
      .withSuccessResponse[StatusOK](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
      .withErrorResponse[AppError](404)
      .withErrorResponse[AppError](501)
        /**
   * Generates an multi-factor authentication secret for a user and returns it as a string and as base64 encoded QR code image. ##### Permissions Must be logged in as the user or have the &#x60;edit_other_users&#x60; permission. 
   * 
   * Expected answers:
   *   code 200 : InlineResponse200 (MFA secret generation successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   *   code 404 : AppError (Resource not found)
   *   code 501 : AppError (Feature is disabled)
   * 
   * @param userId User GUID
   */
  def usersUserIdMfaGeneratePost(userId: String): ApiRequest[InlineResponse200] =
    ApiRequest[InlineResponse200](ApiMethods.POST, "http://your-mattermost-url.com/api/v4", "/users/{user_id}/mfa/generate", "application/json")
      .withPathParam("user_id", userId)
      .withSuccessResponse[InlineResponse200](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
      .withErrorResponse[AppError](404)
      .withErrorResponse[AppError](501)
        /**
   * Activates multi-factor authentication for the user if &#x60;activate&#x60; is true and a valid &#x60;code&#x60; is provided. If activate is false, then &#x60;code&#x60; is not required and multi-factor authentication is disabled for the user. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
   * 
   * Expected answers:
   *   code 200 : StatusOK (User MFA update successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   *   code 501 : AppError (Feature is disabled)
   * 
   * @param userId User GUID
   * @param body 
   */
  def usersUserIdMfaPut(userId: String, body: Body6): ApiRequest[StatusOK] =
    ApiRequest[StatusOK](ApiMethods.PUT, "http://your-mattermost-url.com/api/v4", "/users/{user_id}/mfa", "application/json")
      .withBody(body)
      .withPathParam("user_id", userId)
      .withSuccessResponse[StatusOK](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
      .withErrorResponse[AppError](501)
        /**
   * Update a user&#39;s password. New password must meet password policy set by server configuration. Current password is required if you&#39;re updating your own password. ##### Permissions Must be logged in as the user the password is being changed for or have &#x60;manage_system&#x60; permission. 
   * 
   * Expected answers:
   *   code 200 : StatusOK (User password update successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   * 
   * @param userId User GUID
   * @param body 
   */
  def usersUserIdPasswordPut(userId: String, body: Body8): ApiRequest[StatusOK] =
    ApiRequest[StatusOK](ApiMethods.PUT, "http://your-mattermost-url.com/api/v4", "/users/{user_id}/password", "application/json")
      .withBody(body)
      .withPathParam("user_id", userId)
      .withSuccessResponse[StatusOK](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
        /**
   * Partially update a user by providing only the fields you want to update. Omitted fields will not be updated. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
   * 
   * Expected answers:
   *   code 200 : User (User patch successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   * 
   * @param userId User GUID
   * @param body User object that is to be updated
   */
  def usersUserIdPatchPut(userId: String, body: Body3): ApiRequest[User] =
    ApiRequest[User](ApiMethods.PUT, "http://your-mattermost-url.com/api/v4", "/users/{user_id}/patch", "application/json")
      .withBody(body)
      .withPathParam("user_id", userId)
      .withSuccessResponse[User](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
        /**
   * Update a user by providing the user object. The fields that can be updated are defined in the request body, all other provided fields will be ignored. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
   * 
   * Expected answers:
   *   code 200 : User (User update successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   * 
   * @param userId User GUID
   * @param body User object that is to be updated
   */
  def usersUserIdPut(userId: String, body: Body2): ApiRequest[User] =
    ApiRequest[User](ApiMethods.PUT, "http://your-mattermost-url.com/api/v4", "/users/{user_id}", "application/json")
      .withBody(body)
      .withPathParam("user_id", userId)
      .withSuccessResponse[User](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
        /**
   * Update a user&#39;s system-level roles. Valid user roles are \&quot;system_user\&quot;, \&quot;system_admin\&quot; or both of them. Overwrites any previously assigned system-level roles. ##### Permissions Must have the &#x60;manage_roles&#x60; permission. 
   * 
   * Expected answers:
   *   code 200 : StatusOK (User roles update successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   * 
   * @param userId User GUID
   * @param roles Space-delimited system roles to assign to the user
   */
  def usersUserIdRolesPut(userId: String, roles: Roles): ApiRequest[StatusOK] =
    ApiRequest[StatusOK](ApiMethods.PUT, "http://your-mattermost-url.com/api/v4", "/users/{user_id}/roles", "application/json")
      .withBody(roles)
      .withPathParam("user_id", userId)
      .withSuccessResponse[StatusOK](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
        /**
   * Get a list of sessions by providing the user GUID. Sensitive information will be sanitized out. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
   * 
   * Expected answers:
   *   code 200 : Seq[Session] (User session retrieval successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   * 
   * @param userId User GUID
   */
  def usersUserIdSessionsGet(userId: String): ApiRequest[Seq[Session]] =
    ApiRequest[Seq[Session]](ApiMethods.GET, "http://your-mattermost-url.com/api/v4", "/users/{user_id}/sessions", "application/json")
      .withPathParam("user_id", userId)
      .withSuccessResponse[Seq[Session]](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
        /**
   * Revokes all user sessions from the provided user id and session id strings. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. __Minimum server version__: 4.4 
   * 
   * Expected answers:
   *   code 200 : StatusOK (User sessions revoked successfully)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   * 
   * @param userId User GUID
   */
  def usersUserIdSessionsRevokeAllPost(userId: String): ApiRequest[StatusOK] =
    ApiRequest[StatusOK](ApiMethods.POST, "http://your-mattermost-url.com/api/v4", "/users/{user_id}/sessions/revoke/all", "application/json")
      .withPathParam("user_id", userId)
      .withSuccessResponse[StatusOK](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
        /**
   * Revokes a user session from the provided user id and session id strings. ##### Permissions Must be logged in as the user being updated or have the &#x60;edit_other_users&#x60; permission. 
   * 
   * Expected answers:
   *   code 200 : StatusOK (User session revoked successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   * 
   * @param userId User GUID
   * @param body 
   */
  def usersUserIdSessionsRevokePost(userId: String, body: Body10): ApiRequest[StatusOK] =
    ApiRequest[StatusOK](ApiMethods.POST, "http://your-mattermost-url.com/api/v4", "/users/{user_id}/sessions/revoke", "application/json")
      .withBody(body)
      .withPathParam("user_id", userId)
      .withSuccessResponse[StatusOK](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
        /**
   * Get a list of user access tokens for a user. Does not include the actual authentication tokens. Use query paremeters for paging.  __Minimum server version__: 4.1  ##### Permissions Must have &#x60;read_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
   * 
   * Expected answers:
   *   code 200 : Seq[UserAccessTokenSanitized] (User access tokens retrieval successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   * 
   * @param userId User GUID
   * @param page The page to select.
   * @param perPage The number of tokens per page.
   */
  def usersUserIdTokensGet(userId: String, page: Option[String], perPage: Option[String]): ApiRequest[Seq[UserAccessTokenSanitized]] =
    ApiRequest[Seq[UserAccessTokenSanitized]](ApiMethods.GET, "http://your-mattermost-url.com/api/v4", "/users/{user_id}/tokens", "application/json")
      .withQueryParam("page", page)
      .withQueryParam("per_page", perPage)
      .withPathParam("user_id", userId)
      .withSuccessResponse[Seq[UserAccessTokenSanitized]](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
        /**
   * Generate a user access token that can be used to authenticate with the Mattermost REST API.  __Minimum server version__: 4.1  ##### Permissions Must have &#x60;create_user_access_token&#x60; permission. For non-self requests, must also have the &#x60;edit_other_users&#x60; permission. 
   * 
   * Expected answers:
   *   code 201 : UserAccessToken (User access token creation successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   * 
   * @param userId User GUID
   * @param token 
   */
  def usersUserIdTokensPost(userId: String, token: Token): ApiRequest[UserAccessToken] =
    ApiRequest[UserAccessToken](ApiMethods.POST, "http://your-mattermost-url.com/api/v4", "/users/{user_id}/tokens", "application/json")
      .withBody(token)
      .withPathParam("user_id", userId)
      .withSuccessResponse[UserAccessToken](201)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
        /**
   * Get a user object by providing a username. Sensitive information will be sanitized out. ##### Permissions Requires an active session but no other permissions. 
   * 
   * Expected answers:
   *   code 200 : User (User retrieval successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 404 : AppError (Resource not found)
   * 
   * @param username Username
   */
  def usersUsernameUsernameGet(username: String): ApiRequest[User] =
    ApiRequest[User](ApiMethods.GET, "http://your-mattermost-url.com/api/v4", "/users/username/{username}", "application/json")
      .withPathParam("username", username)
      .withSuccessResponse[User](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](404)
        /**
   * Get a list of users based on a provided list of usernames. ##### Permissions Requires an active session but no other permissions. 
   * 
   * Expected answers:
   *   code 200 : Seq[User] (User list retrieval successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   * 
   * @param body List of usernames
   */
  def usersUsernamesPost(body: Seq[String]): ApiRequest[Seq[User]] =
    ApiRequest[Seq[User]](ApiMethods.POST, "http://your-mattermost-url.com/api/v4", "/users/usernames", "application/json")
      .withBody(body)
      .withSuccessResponse[Seq[User]](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      

}

