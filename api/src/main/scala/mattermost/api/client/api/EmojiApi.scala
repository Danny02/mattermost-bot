/**
 * NOTE: This class is auto generated by the akka-scala (beta) swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * For any issue or feedback, please open a ticket via https://github.com/swagger-api/swagger-codegen/issues/new
 */
package mattermost.api.client.api

import java.io.File

import mattermost.api.client.core._
import mattermost.api.client.model.{AppError, Emoji}

object EmojiApi {

  /**
   * Delete a custom emoji. ##### Permissions Must have the &#x60;manage_team&#x60; or &#x60;manage_system&#x60; permissions or be the user who created the emoji. 
   * 
   * Expected answers:
   *   code 200 : Emoji (Emoji delete successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   *   code 501 : AppError (Feature is disabled)
   * 
   * @param emojiId Emoji GUID
   */
  def emojiEmojiIdDelete(emojiId: String): ApiRequest[Emoji] =
    ApiRequest[Emoji](ApiMethods.DELETE, "http://your-mattermost-url.com/api/v4", "/emoji/{emoji_id}", "application/json")
      .withPathParam("emoji_id", emojiId)
      .withSuccessResponse[Emoji](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
      .withErrorResponse[AppError](501)
        /**
   * Get some metadata for a custom emoji. ##### Permissions Must be authenticated. 
   * 
   * Expected answers:
   *   code 200 : Emoji (Emoji retrieval successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   *   code 501 : AppError (Feature is disabled)
   * 
   * @param emojiId Emoji GUID
   */
  def emojiEmojiIdGet(emojiId: String): ApiRequest[Emoji] =
    ApiRequest[Emoji](ApiMethods.GET, "http://your-mattermost-url.com/api/v4", "/emoji/{emoji_id}", "application/json")
      .withPathParam("emoji_id", emojiId)
      .withSuccessResponse[Emoji](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
      .withErrorResponse[AppError](501)
        /**
   * Get the image for a custom emoji. ##### Permissions Must be authenticated. 
   * 
   * Expected answers:
   *   code 200 :  (Emoji image retrieval successful)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   *   code 404 : AppError (Resource not found)
   *   code 500 : AppError (Something went wrong with the server)
   *   code 501 : AppError (Feature is disabled)
   * 
   * @param emojiId Emoji GUID
   */
  def emojiEmojiIdImageGet(emojiId: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, "http://your-mattermost-url.com/api/v4", "/emoji/{emoji_id}/image", "application/json")
      .withPathParam("emoji_id", emojiId)
      .withSuccessResponse[Unit](200)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
      .withErrorResponse[AppError](404)
      .withErrorResponse[AppError](500)
      .withErrorResponse[AppError](501)
        /**
   * Get a page of metadata for custom emoji on the system. ##### Permissions Must be authenticated. 
   * 
   * Expected answers:
   *   code 200 : Emoji (Emoji list retrieval successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   *   code 501 : AppError (Feature is disabled)
   * 
   * @param page The page to select.
   * @param perPage The number of users per page.
   */
  def emojiGet(page: Option[String], perPage: Option[String]): ApiRequest[Emoji] =
    ApiRequest[Emoji](ApiMethods.GET, "http://your-mattermost-url.com/api/v4", "/emoji", "application/json")
      .withQueryParam("page", page)
      .withQueryParam("per_page", perPage)
      .withSuccessResponse[Emoji](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
      .withErrorResponse[AppError](501)
        /**
   * Create a custom emoji for the team. ##### Permissions Must be authenticated. 
   * 
   * Expected answers:
   *   code 201 : Emoji (Emoji creation successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   *   code 413 : AppError (Content too large)
   *   code 501 : AppError (Feature is disabled)
   * 
   * @param image A file to be uploaded
   * @param emoji A JSON object containing a &#x60;name&#x60; field with the name of the emoji and a &#x60;creator_id&#x60; field with the id of the authenticated user.
   */
  def emojiPost(image: File, emoji: String): ApiRequest[Emoji] =
    ApiRequest[Emoji](ApiMethods.POST, "http://your-mattermost-url.com/api/v4", "/emoji", "multipart/form-data")
      .withFormParam("image", image)
      .withFormParam("emoji", emoji)
      .withSuccessResponse[Emoji](201)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
      .withErrorResponse[AppError](413)
      .withErrorResponse[AppError](501)
      

}

