/**
 * NOTE: This class is auto generated by the akka-scala (beta) swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * For any issue or feedback, please open a ticket via https://github.com/swagger-api/swagger-codegen/issues/new
 */
package mattermost.api.client.api

import java.io.File

import mattermost.api.client.core._
import mattermost.api.client.model._

object SystemApi {

  /**
   * Get some analytics data about the system. This endpoint uses the old format, the &#x60;/analytics&#x60; route is reserved for the new format when it gets implemented.  The returned JSON changes based on the &#x60;name&#x60; query parameter but is always key/value pairs.  __Minimum server version__: 4.0  ##### Permissions Must have &#x60;manage_system&#x60; permission. 
   * 
   * Expected answers:
   *   code 200 :  (Analytics retrieval successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   * 
   * @param name Possible values are \&quot;standard\&quot;, \&quot;post_counts_day\&quot;, \&quot;user_counts_with_posts_day\&quot; or \&quot;extra_counts\&quot;
   * @param teamId The team ID to filter the data by
   */
  def analyticsOldGet(name: Option[String], teamId: Option[String] = None): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, "http://your-mattermost-url.com/api/v4", "/analytics/old", "application/json")
      .withQueryParam("name", name)
      .withQueryParam("team_id", teamId)
      .withSuccessResponse[Unit](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
        /**
   * Get a page of audits for all users on the system, selected with &#x60;page&#x60; and &#x60;per_page&#x60; query parameters. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
   * 
   * Expected answers:
   *   code 200 : Seq[Audit] (Audits retrieval successful)
   *   code 403 : AppError (Do not have appropriate permissions)
   * 
   * @param page The page to select.
   * @param perPage The number of audits per page.
   */
  def auditsGet(page: Option[String], perPage: Option[String]): ApiRequest[Seq[Audit]] =
    ApiRequest[Seq[Audit]](ApiMethods.GET, "http://your-mattermost-url.com/api/v4", "/audits", "application/json")
      .withQueryParam("page", page)
      .withQueryParam("per_page", perPage)
      .withSuccessResponse[Seq[Audit]](200)
      .withErrorResponse[AppError](403)
        /**
   * Purge all the in-memory caches for the Mattermost server. This can have a temporary negative effect on performance while the caches are re-populated. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
   * 
   * Expected answers:
   *   code 200 : StatusOK (Caches invalidate successful)
   *   code 403 : AppError (Do not have appropriate permissions)
   */
  def cachesInvalidatePost(): ApiRequest[StatusOK] =
    ApiRequest[StatusOK](ApiMethods.POST, "http://your-mattermost-url.com/api/v4", "/caches/invalidate", "application/json")
      .withSuccessResponse[StatusOK](200)
      .withErrorResponse[AppError](403)
        /**
   * Get a subset of the server configuration needed by the client. ##### Permissions No permission required. 
   * 
   * Expected answers:
   *   code 200 :  (Configuration retrieval successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 501 : AppError (Feature is disabled)
   * 
   * @param format Must be &#x60;old&#x60;, other formats not implemented yet
   */
  def configClientGet(format: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, "http://your-mattermost-url.com/api/v4", "/config/client", "application/json")
      .withQueryParam("format", format)
      .withSuccessResponse[Unit](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](501)
        /**
   * Retrieve the current server configuration ##### Permissions Must have &#x60;manage_system&#x60; permission. 
   * 
   * Expected answers:
   *   code 200 : Config (Configuration retrieval successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 403 : AppError (Do not have appropriate permissions)
   */
  def configGet(): ApiRequest[Config] =
    ApiRequest[Config](ApiMethods.GET, "http://your-mattermost-url.com/api/v4", "/config", "application/json")
      .withSuccessResponse[Config](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](403)
        /**
   * Submit a new configuration for the server to use. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
   * 
   * Expected answers:
   *   code 200 : Config (Configuration update successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 403 : AppError (Do not have appropriate permissions)
   */
  def configPut(): ApiRequest[Config] =
    ApiRequest[Config](ApiMethods.PUT, "http://your-mattermost-url.com/api/v4", "/config", "application/json")
      .withSuccessResponse[Config](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](403)
        /**
   * Reload the configuration file to pick up on any changes made to it. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
   * 
   * Expected answers:
   *   code 200 : StatusOK (Configuration reload successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 403 : AppError (Do not have appropriate permissions)
   */
  def configReloadPost(): ApiRequest[StatusOK] =
    ApiRequest[StatusOK](ApiMethods.POST, "http://your-mattermost-url.com/api/v4", "/config/reload", "application/json")
      .withSuccessResponse[StatusOK](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](403)
        /**
   * Recycle database connections by closing and reconnecting all connections to master and read replica databases. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
   * 
   * Expected answers:
   *   code 200 : StatusOK (Database recycle successful)
   *   code 403 : AppError (Do not have appropriate permissions)
   */
  def databaseRecyclePost(): ApiRequest[StatusOK] =
    ApiRequest[StatusOK](ApiMethods.POST, "http://your-mattermost-url.com/api/v4", "/database/recycle", "application/json")
      .withSuccessResponse[StatusOK](200)
      .withErrorResponse[AppError](403)
        /**
   * Send a test email to make sure you have your email settings configured correctly. Optionally provide a configuration in the request body to test. If no valid configuration is present in the request body the current server configuration will be tested. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
   * 
   * Expected answers:
   *   code 200 : StatusOK (Email successful sent)
   *   code 403 : AppError (Do not have appropriate permissions)
   *   code 500 : AppError (Something went wrong with the server)
   */
  def emailTestPost(): ApiRequest[StatusOK] =
    ApiRequest[StatusOK](ApiMethods.POST, "http://your-mattermost-url.com/api/v4", "/email/test", "application/json")
      .withSuccessResponse[StatusOK](200)
      .withErrorResponse[AppError](403)
      .withErrorResponse[AppError](500)
        /**
   * Get a subset of the server license needed by the client. ##### Permissions No permission required but having the &#x60;manage_system&#x60; permission returns more information. 
   * 
   * Expected answers:
   *   code 200 :  (License retrieval successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 501 : AppError (Feature is disabled)
   * 
   * @param format Must be &#x60;old&#x60;, other formats not implemented yet
   */
  def licenseClientGet(format: String): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.GET, "http://your-mattermost-url.com/api/v4", "/license/client", "application/json")
      .withQueryParam("format", format)
      .withSuccessResponse[Unit](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](501)
        /**
   * Remove the license file from the server. This will disable all enterprise features.  __Minimum server version__: 4.0  ##### Permissions Must have &#x60;manage_system&#x60; permission. 
   * 
   * Expected answers:
   *   code 200 :  (License removeal successful)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   */
  def licenseDelete(): ApiRequest[Unit] =
    ApiRequest[Unit](ApiMethods.DELETE, "http://your-mattermost-url.com/api/v4", "/license", "application/json")
      .withSuccessResponse[Unit](200)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
        /**
   * Upload a license to enable enterprise features.  __Minimum server version__: 4.0  ##### Permissions Must have &#x60;manage_system&#x60; permission. 
   * 
   * Expected answers:
   *   code 201 : StatusOK (License file upload successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   *   code 413 : AppError (Content too large)
   * 
   * @param license The license to be uploaded
   */
  def licensePost(license: File): ApiRequest[StatusOK] =
    ApiRequest[StatusOK](ApiMethods.POST, "http://your-mattermost-url.com/api/v4", "/license", "multipart/form-data")
      .withFormParam("license", license)
      .withSuccessResponse[StatusOK](201)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
      .withErrorResponse[AppError](413)
        /**
   * Get a page of server logs, selected with &#x60;page&#x60; and &#x60;logs_per_page&#x60; query parameters. ##### Permissions Must have &#x60;manage_system&#x60; permission. 
   * 
   * Expected answers:
   *   code 200 : Seq[String] (Logs retrieval successful)
   *   code 403 : AppError (Do not have appropriate permissions)
   * 
   * @param page The page to select.
   * @param logsPerPage The number of logs per page. There is a maximum limit of 10000 logs per page.
   */
  def logsGet(page: Option[String], logsPerPage: Option[String]): ApiRequest[Seq[String]] =
    ApiRequest[Seq[String]](ApiMethods.GET, "http://your-mattermost-url.com/api/v4", "/logs", "application/json")
      .withQueryParam("page", page)
      .withQueryParam("logs_per_page", logsPerPage)
      .withSuccessResponse[Seq[String]](200)
      .withErrorResponse[AppError](403)
        /**
   * Add log messages to the server logs. ##### Permissions Users with &#x60;manage_system&#x60; permission can log ERROR or DEBUG messages. Logged in users can log ERROR or DEBUG messages when &#x60;ServiceSettings.EnableDeveloper&#x60; is &#x60;true&#x60; or just DEBUG messages when &#x60;false&#x60;. Non-logged in users can log ERROR or DEBUG messages when &#x60;ServiceSettings.EnableDeveloper&#x60; is &#x60;true&#x60; and cannot log when &#x60;false&#x60;. 
   * 
   * Expected answers:
   *   code 200 : Any (Logs sent successful)
   *   code 403 : AppError (Do not have appropriate permissions)
   * 
   * @param body 
   */
  def logsPost(body: Body31): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.POST, "http://your-mattermost-url.com/api/v4", "/logs", "application/json")
      .withBody(body)
      .withSuccessResponse[Any](200)
      .withErrorResponse[AppError](403)
        /**
   * Check if the server is up and healthy based on the configuration setting &#x60;GoRoutineHealthThreshold&#x60;. If &#x60;GoRoutineHealthThreshold&#x60; and the number of goroutines on the server exceeds that threshold the server is considered unhealthy. If &#x60;GoRoutineHealthThreshold&#x60; is not set or the number of goroutines is below the threshold the server is considered healthy. __Minimum server version__: 3.10 ##### Permissions Must be logged in. 
   * 
   * Expected answers:
   *   code 200 : Any (Status of the system)
   *   code 500 : AppError (Something went wrong with the server)
   */
  def systemPingGet(): ApiRequest[Any] =
    ApiRequest[Any](ApiMethods.GET, "http://your-mattermost-url.com/api/v4", "/system/ping", "application/json")
      .withSuccessResponse[Any](200)
      .withErrorResponse[AppError](500)
        /**
   * Get a valid WebRTC token, STUN and TURN server URLs along with TURN credentials to use with the Mattermost WebRTC service. See https://docs.mattermost.com/administration/config-settings.html#webrtc-beta for WebRTC configutation settings. The token returned is for the current user&#39;s session. ##### Permissions Must be authenticated. 
   * 
   * Expected answers:
   *   code 200 : InlineResponse2007 (WebRTC Token retrieval successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 501 : AppError (Feature is disabled)
   */
  def webrtcTokenGet(): ApiRequest[InlineResponse2007] =
    ApiRequest[InlineResponse2007](ApiMethods.GET, "http://your-mattermost-url.com/api/v4", "/webrtc/token", "application/json")
      .withSuccessResponse[InlineResponse2007](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](501)
      

}

