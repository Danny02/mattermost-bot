/**
 * NOTE: This class is auto generated by the akka-scala (beta) swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * For any issue or feedback, please open a ticket via https://github.com/swagger-api/swagger-codegen/issues/new
 */
package mattermost.api.client.api

import mattermost.api.client.core._
import mattermost.api.client.model._

object OAuthApi {

  /**
   * Delete and unregister an OAuth 2.0 client application  ##### Permissions If app creator, must have &#x60;mange_oauth&#x60; permission otherwise &#x60;manage_system_wide_oauth&#x60; permission is required. 
   * 
   * Expected answers:
   *   code 200 : StatusOK (App deletion successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   *   code 404 : AppError (Resource not found)
   *   code 501 : AppError (Feature is disabled)
   * 
   * @param appId Application client id
   */
  def oauthAppsAppIdDelete(appId: String): ApiRequest[StatusOK] =
    ApiRequest[StatusOK](ApiMethods.DELETE, "http://your-mattermost-url.com/api/v4", "/oauth/apps/{app_id}", "application/json")
      .withPathParam("app_id", appId)
      .withSuccessResponse[StatusOK](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
      .withErrorResponse[AppError](404)
      .withErrorResponse[AppError](501)
        /**
   * Get an OAuth 2.0 client application registered with Mattermost. ##### Permissions If app creator, must have &#x60;mange_oauth&#x60; permission otherwise &#x60;manage_system_wide_oauth&#x60; permission is required. 
   * 
   * Expected answers:
   *   code 200 : OAuthApp (App retrieval successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   *   code 404 : AppError (Resource not found)
   *   code 501 : AppError (Feature is disabled)
   * 
   * @param appId Application client id
   */
  def oauthAppsAppIdGet(appId: String): ApiRequest[OAuthApp] =
    ApiRequest[OAuthApp](ApiMethods.GET, "http://your-mattermost-url.com/api/v4", "/oauth/apps/{app_id}", "application/json")
      .withPathParam("app_id", appId)
      .withSuccessResponse[OAuthApp](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
      .withErrorResponse[AppError](404)
      .withErrorResponse[AppError](501)
        /**
   * Get public information about an OAuth 2.0 client application registered with Mattermost. The application&#39;s client secret will be blanked out. ##### Permissions Must be authenticated. 
   * 
   * Expected answers:
   *   code 200 : OAuthApp (App retrieval successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 404 : AppError (Resource not found)
   *   code 501 : AppError (Feature is disabled)
   * 
   * @param appId Application client id
   */
  def oauthAppsAppIdInfoGet(appId: String): ApiRequest[OAuthApp] =
    ApiRequest[OAuthApp](ApiMethods.GET, "http://your-mattermost-url.com/api/v4", "/oauth/apps/{app_id}/info", "application/json")
      .withPathParam("app_id", appId)
      .withSuccessResponse[OAuthApp](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](404)
      .withErrorResponse[AppError](501)
        /**
   * Update an OAuth 2.0 client application based on OAuth struct. ##### Permissions If app creator, must have &#x60;mange_oauth&#x60; permission otherwise &#x60;manage_system_wide_oauth&#x60; permission is required. 
   * 
   * Expected answers:
   *   code 200 : OAuthApp (App update successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   *   code 404 : AppError (Resource not found)
   *   code 501 : AppError (Feature is disabled)
   * 
   * @param appId Application client id
   * @param body OAuth application to update
   */
  def oauthAppsAppIdPut(appId: String, body: Body39): ApiRequest[OAuthApp] =
    ApiRequest[OAuthApp](ApiMethods.PUT, "http://your-mattermost-url.com/api/v4", "/oauth/apps/{app_id}", "application/json")
      .withBody(body)
      .withPathParam("app_id", appId)
      .withSuccessResponse[OAuthApp](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
      .withErrorResponse[AppError](404)
      .withErrorResponse[AppError](501)
        /**
   * Regenerate the client secret for an OAuth 2.0 client application registered with Mattermost. ##### Permissions If app creator, must have &#x60;mange_oauth&#x60; permission otherwise &#x60;manage_system_wide_oauth&#x60; permission is required. 
   * 
   * Expected answers:
   *   code 200 : OAuthApp (Secret regeneration successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   *   code 404 : AppError (Resource not found)
   *   code 501 : AppError (Feature is disabled)
   * 
   * @param appId Application client id
   */
  def oauthAppsAppIdRegenSecretPost(appId: String): ApiRequest[OAuthApp] =
    ApiRequest[OAuthApp](ApiMethods.POST, "http://your-mattermost-url.com/api/v4", "/oauth/apps/{app_id}/regen_secret", "application/json")
      .withPathParam("app_id", appId)
      .withSuccessResponse[OAuthApp](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
      .withErrorResponse[AppError](404)
      .withErrorResponse[AppError](501)
        /**
   * Get a page of OAuth 2.0 client applications registered with Mattermost. ##### Permissions With &#x60;manage_oauth&#x60; permission, the apps registered by the logged in user are returned. With &#x60;manage_system_wide_oauth&#x60; permission, all apps regardless of creator are returned. 
   * 
   * Expected answers:
   *   code 200 : Seq[OAuthApp] (OAuthApp list retrieval successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   *   code 501 : AppError (Feature is disabled)
   * 
   * @param page The page to select.
   * @param perPage The number of apps per page.
   */
  def oauthAppsGet(page: Option[String], perPage: Option[String]): ApiRequest[Seq[OAuthApp]] =
    ApiRequest[Seq[OAuthApp]](ApiMethods.GET, "http://your-mattermost-url.com/api/v4", "/oauth/apps", "application/json")
      .withQueryParam("page", page)
      .withQueryParam("per_page", perPage)
      .withSuccessResponse[Seq[OAuthApp]](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
      .withErrorResponse[AppError](501)
        /**
   * Register an OAuth 2.0 client application with Mattermost as the service provider. ##### Permissions Must have &#x60;manage_oauth&#x60; permission. 
   * 
   * Expected answers:
   *   code 201 : OAuthApp (App registration successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   *   code 501 : AppError (Feature is disabled)
   * 
   * @param body OAuth application to register
   */
  def oauthAppsPost(body: Body38): ApiRequest[OAuthApp] =
    ApiRequest[OAuthApp](ApiMethods.POST, "http://your-mattermost-url.com/api/v4", "/oauth/apps", "application/json")
      .withBody(body)
      .withSuccessResponse[OAuthApp](201)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
      .withErrorResponse[AppError](501)
        /**
   * Get a page of OAuth 2.0 client applications authorized to access a user&#39;s account. ##### Permissions Must be authenticated as the user or have &#x60;edit_other_users&#x60; permission. 
   * 
   * Expected answers:
   *   code 200 : Seq[OAuthApp] (OAuthApp list retrieval successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   *   code 501 : AppError (Feature is disabled)
   * 
   * @param userId User GUID
   * @param page The page to select.
   * @param perPage The number of apps per page.
   */
  def usersUserIdOauthAppsAuthorizedGet(userId: String, page: Option[String], perPage: Option[String]): ApiRequest[Seq[OAuthApp]] =
    ApiRequest[Seq[OAuthApp]](ApiMethods.GET, "http://your-mattermost-url.com/api/v4", "/users/{user_id}/oauth/apps/authorized", "application/json")
      .withQueryParam("page", page)
      .withQueryParam("per_page", perPage)
      .withPathParam("user_id", userId)
      .withSuccessResponse[Seq[OAuthApp]](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
      .withErrorResponse[AppError](501)
      

}

