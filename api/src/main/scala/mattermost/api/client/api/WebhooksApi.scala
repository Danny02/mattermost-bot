/**
 * NOTE: This class is auto generated by the akka-scala (beta) swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * For any issue or feedback, please open a ticket via https://github.com/swagger-api/swagger-codegen/issues/new
 */
package mattermost.api.client.api

import mattermost.api.client.core._
import mattermost.api.client.model._

object WebhooksApi {

  /**
   * Get a page of a list of incoming webhooks. Optionally filter for a specific team using query parameters. ##### Permissions &#x60;manage_webhooks&#x60; for the system or &#x60;manage_webhooks&#x60; for the specific team. 
   * 
   * Expected answers:
   *   code 200 : Seq[IncomingWebhook] (Incoming webhooks retrieval successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   * 
   * @param page The page to select.
   * @param perPage The number of hooks per page.
   * @param teamId The ID of the team to get hooks for.
   */
  def hooksIncomingGet(page: Option[String], perPage: Option[String], teamId: Option[String] = None): ApiRequest[Seq[IncomingWebhook]] =
    ApiRequest[Seq[IncomingWebhook]](ApiMethods.GET, "http://your-mattermost-url.com/api/v4", "/hooks/incoming", "application/json")
      .withQueryParam("page", page)
      .withQueryParam("per_page", perPage)
      .withQueryParam("team_id", teamId)
      .withSuccessResponse[Seq[IncomingWebhook]](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
        /**
   * Get an incoming webhook given the hook id. ##### Permissions &#x60;manage_webhooks&#x60; for system or &#x60;manage_webhooks&#x60; for the specific team or &#x60;manage_webhooks&#x60; for the channel. 
   * 
   * Expected answers:
   *   code 200 : IncomingWebhook (Webhook retrieval successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   *   code 404 : AppError (Resource not found)
   * 
   * @param hookId Incoming Webhook GUID
   */
  def hooksIncomingHookIdGet(hookId: String): ApiRequest[IncomingWebhook] =
    ApiRequest[IncomingWebhook](ApiMethods.GET, "http://your-mattermost-url.com/api/v4", "/hooks/incoming/{hook_id}", "application/json")
      .withPathParam("hook_id", hookId)
      .withSuccessResponse[IncomingWebhook](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
      .withErrorResponse[AppError](404)
        /**
   * Update an incoming webhook given the hook id. ##### Permissions &#x60;manage_webhooks&#x60; for system or &#x60;manage_webhooks&#x60; for the specific team or &#x60;manage_webhooks&#x60; for the channel. 
   * 
   * Expected answers:
   *   code 200 : IncomingWebhook (Webhook update successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   *   code 404 : AppError (Resource not found)
   * 
   * @param hookId Incoming Webhook GUID
   * @param body Incoming webhook to be updated
   */
  def hooksIncomingHookIdPut(hookId: String, body: Body33): ApiRequest[IncomingWebhook] =
    ApiRequest[IncomingWebhook](ApiMethods.PUT, "http://your-mattermost-url.com/api/v4", "/hooks/incoming/{hook_id}", "application/json")
      .withBody(body)
      .withPathParam("hook_id", hookId)
      .withSuccessResponse[IncomingWebhook](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
      .withErrorResponse[AppError](404)
        /**
   * Create an incoming webhook for a channel. ##### Permissions &#x60;manage_webhooks&#x60; for the channel the webhook is in. 
   * 
   * Expected answers:
   *   code 201 : IncomingWebhook (Incoming webhook creation successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   * 
   * @param body Incoming webhook to be created
   */
  def hooksIncomingPost(body: Body32): ApiRequest[IncomingWebhook] =
    ApiRequest[IncomingWebhook](ApiMethods.POST, "http://your-mattermost-url.com/api/v4", "/hooks/incoming", "application/json")
      .withBody(body)
      .withSuccessResponse[IncomingWebhook](201)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
        /**
   * Get a page of a list of outgoing webhooks. Optionally filter for a specific team or channel using query parameters. ##### Permissions &#x60;manage_webhooks&#x60; for the system or &#x60;manage_webhooks&#x60; for the specific team/channel. 
   * 
   * Expected answers:
   *   code 200 : Seq[OutgoingWebhook] (Outgoing webhooks retrieval successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   *   code 404 : AppError (Resource not found)
   * 
   * @param page The page to select.
   * @param perPage The number of hooks per page.
   * @param teamId The ID of the team to get hooks for.
   * @param channelId The ID of the channel to get hooks for.
   */
  def hooksOutgoingGet(page: Option[String], perPage: Option[String], teamId: Option[String] = None, channelId: Option[String] = None): ApiRequest[Seq[OutgoingWebhook]] =
    ApiRequest[Seq[OutgoingWebhook]](ApiMethods.GET, "http://your-mattermost-url.com/api/v4", "/hooks/outgoing", "application/json")
      .withQueryParam("page", page)
      .withQueryParam("per_page", perPage)
      .withQueryParam("team_id", teamId)
      .withQueryParam("channel_id", channelId)
      .withSuccessResponse[Seq[OutgoingWebhook]](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
      .withErrorResponse[AppError](404)
        /**
   * Delete an outgoing webhook given the hook id. ##### Permissions &#x60;manage_webhooks&#x60; for system or &#x60;manage_webhooks&#x60; for the specific team or &#x60;manage_webhooks&#x60; for the channel. 
   * 
   * Expected answers:
   *   code 200 : StatusOK (Webhook deletion successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   *   code 404 : AppError (Resource not found)
   * 
   * @param hookId Outgoing webhook GUID
   */
  def hooksOutgoingHookIdDelete(hookId: String): ApiRequest[StatusOK] =
    ApiRequest[StatusOK](ApiMethods.DELETE, "http://your-mattermost-url.com/api/v4", "/hooks/outgoing/{hook_id}", "application/json")
      .withPathParam("hook_id", hookId)
      .withSuccessResponse[StatusOK](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
      .withErrorResponse[AppError](404)
        /**
   * Get an outgoing webhook given the hook id. ##### Permissions &#x60;manage_webhooks&#x60; for system or &#x60;manage_webhooks&#x60; for the specific team or &#x60;manage_webhooks&#x60; for the channel. 
   * 
   * Expected answers:
   *   code 200 : OutgoingWebhook (Outgoing webhook retrieval successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   *   code 404 : AppError (Resource not found)
   * 
   * @param hookId Outgoing webhook GUID
   */
  def hooksOutgoingHookIdGet(hookId: String): ApiRequest[OutgoingWebhook] =
    ApiRequest[OutgoingWebhook](ApiMethods.GET, "http://your-mattermost-url.com/api/v4", "/hooks/outgoing/{hook_id}", "application/json")
      .withPathParam("hook_id", hookId)
      .withSuccessResponse[OutgoingWebhook](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
      .withErrorResponse[AppError](404)
        /**
   * Update an outgoing webhook given the hook id. ##### Permissions &#x60;manage_webhooks&#x60; for system or &#x60;manage_webhooks&#x60; for the specific team or &#x60;manage_webhooks&#x60; for the channel. 
   * 
   * Expected answers:
   *   code 200 : OutgoingWebhook (Webhook update successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   *   code 404 : AppError (Resource not found)
   * 
   * @param hookId outgoing Webhook GUID
   * @param body Outgoing webhook to be updated
   */
  def hooksOutgoingHookIdPut(hookId: String, body: Body35): ApiRequest[OutgoingWebhook] =
    ApiRequest[OutgoingWebhook](ApiMethods.PUT, "http://your-mattermost-url.com/api/v4", "/hooks/outgoing/{hook_id}", "application/json")
      .withBody(body)
      .withPathParam("hook_id", hookId)
      .withSuccessResponse[OutgoingWebhook](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
      .withErrorResponse[AppError](404)
        /**
   * Regenerate the token for the outgoing webhook. ##### Permissions &#x60;manage_webhooks&#x60; for system or &#x60;manage_webhooks&#x60; for the specific team or &#x60;manage_webhooks&#x60; for the channel. 
   * 
   * Expected answers:
   *   code 200 : StatusOK (Webhook token regenerate successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   *   code 404 : AppError (Resource not found)
   * 
   * @param hookId Outgoing webhook GUID
   */
  def hooksOutgoingHookIdRegenTokenPost(hookId: String): ApiRequest[StatusOK] =
    ApiRequest[StatusOK](ApiMethods.POST, "http://your-mattermost-url.com/api/v4", "/hooks/outgoing/{hook_id}/regen_token", "application/json")
      .withPathParam("hook_id", hookId)
      .withSuccessResponse[StatusOK](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
      .withErrorResponse[AppError](404)
        /**
   * Create an outgoing webhook for a team. ##### Permissions &#x60;manage_webhooks&#x60; for the team the webhook is in. 
   * 
   * Expected answers:
   *   code 201 : OutgoingWebhook (Outgoing webhook creation successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   *   code 404 : AppError (Resource not found)
   * 
   * @param body Outgoing webhook to be created
   */
  def hooksOutgoingPost(body: Body34): ApiRequest[OutgoingWebhook] =
    ApiRequest[OutgoingWebhook](ApiMethods.POST, "http://your-mattermost-url.com/api/v4", "/hooks/outgoing", "application/json")
      .withBody(body)
      .withSuccessResponse[OutgoingWebhook](201)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
      .withErrorResponse[AppError](404)
      

}

