/**
 * NOTE: This class is auto generated by the akka-scala (beta) swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * For any issue or feedback, please open a ticket via https://github.com/swagger-api/swagger-codegen/issues/new
 */
package mattermost.api.client.api

import java.io.File

import mattermost.api.client.core._
import mattermost.api.client.model.{AppError, InlineResponse2009, PluginManifestWebapp, StatusOK}

object PluginsApi {

  /**
   * Get a list of inactive and a list of active plugin manifests. Plugins must be enabled in the server&#39;s config settings.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 4.4 
   * 
   * Expected answers:
   *   code 200 : InlineResponse2009 (Plugins retrieval successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   *   code 501 : AppError (Feature is disabled)
   */
  def pluginsGet(): ApiRequest[InlineResponse2009] =
    ApiRequest[InlineResponse2009](ApiMethods.GET, "http://your-mattermost-url.com/api/v4", "/plugins", "application/json")
      .withSuccessResponse[InlineResponse2009](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
      .withErrorResponse[AppError](501)
        /**
   * Activate a previously uploaded plugin. Plugins must be enabled in the server&#39;s config settings.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 4.4 
   * 
   * Expected answers:
   *   code 200 : StatusOK (Plugin activated successfully)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   *   code 501 : AppError (Feature is disabled)
   * 
   * @param pluginId 
   */
  def pluginsPluginIdActivatePost(pluginId: String): ApiRequest[StatusOK] =
    ApiRequest[StatusOK](ApiMethods.POST, "http://your-mattermost-url.com/api/v4", "/plugins/{plugin_id}/activate", "application/json")
      .withPathParam("plugin_id", pluginId)
      .withSuccessResponse[StatusOK](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
      .withErrorResponse[AppError](501)
        /**
   * Deactivate a previously activated plugin. Plugins must be enabled in the server&#39;s config settings.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 4.4 
   * 
   * Expected answers:
   *   code 200 : StatusOK (Plugin deactivated successfully)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   *   code 501 : AppError (Feature is disabled)
   * 
   * @param pluginId 
   */
  def pluginsPluginIdDeactivatePost(pluginId: String): ApiRequest[StatusOK] =
    ApiRequest[StatusOK](ApiMethods.POST, "http://your-mattermost-url.com/api/v4", "/plugins/{plugin_id}/deactivate", "application/json")
      .withPathParam("plugin_id", pluginId)
      .withSuccessResponse[StatusOK](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
      .withErrorResponse[AppError](501)
        /**
   * Remove the plugin with the provided ID from the server. All plugin files are deleted. Plugins must be enabled in the server&#39;s config settings.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 4.4 
   * 
   * Expected answers:
   *   code 200 : StatusOK (Plugin removed successfully)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   *   code 501 : AppError (Feature is disabled)
   * 
   * @param pluginId 
   */
  def pluginsPluginIdDelete(pluginId: String): ApiRequest[StatusOK] =
    ApiRequest[StatusOK](ApiMethods.DELETE, "http://your-mattermost-url.com/api/v4", "/plugins/{plugin_id}", "application/json")
      .withPathParam("plugin_id", pluginId)
      .withSuccessResponse[StatusOK](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
      .withErrorResponse[AppError](501)
        /**
   * Upload a plugin compressed in a .tar.gz file. Plugins and plugin uploads must be enabled in the server&#39;s config settings.  ##### Permissions Must have &#x60;manage_system&#x60; permission.  __Minimum server version__: 4.4 
   * 
   * Expected answers:
   *   code 201 : StatusOK (Plugin upload successful)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   *   code 413 : AppError (Content too large)
   *   code 501 : AppError (Feature is disabled)
   * 
   * @param plugin The plugin image to be uploaded
   */
  def pluginsPost(plugin: File): ApiRequest[StatusOK] =
    ApiRequest[StatusOK](ApiMethods.POST, "http://your-mattermost-url.com/api/v4", "/plugins", "multipart/form-data")
      .withFormParam("plugin", plugin)
      .withSuccessResponse[StatusOK](201)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
      .withErrorResponse[AppError](413)
      .withErrorResponse[AppError](501)
        /**
   * Deactivate a previously activated plugin. Plugins must be enabled in the server&#39;s config settings.  ##### Permissions No permissions required.  __Minimum server version__: 4.4 
   * 
   * Expected answers:
   *   code 200 : Seq[PluginManifestWebapp] (Plugin deactivated successfully)
   *   code 400 : AppError (Invalid or missing parameters in URL or request body)
   *   code 401 : AppError (No access token provided)
   *   code 403 : AppError (Do not have appropriate permissions)
   *   code 501 : AppError (Feature is disabled)
   */
  def pluginsWebappGet(): ApiRequest[Seq[PluginManifestWebapp]] =
    ApiRequest[Seq[PluginManifestWebapp]](ApiMethods.GET, "http://your-mattermost-url.com/api/v4", "/plugins/webapp", "application/json")
      .withSuccessResponse[Seq[PluginManifestWebapp]](200)
      .withErrorResponse[AppError](400)
      .withErrorResponse[AppError](401)
      .withErrorResponse[AppError](403)
      .withErrorResponse[AppError](501)
      

}

